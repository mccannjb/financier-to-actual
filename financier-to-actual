#!/usr/bin/env node

const { program } = require('commander');
const cliProgress = require('cli-progress');
const fs = require('fs')

program
    .name('financier-to-actual')
    .description(`A tool to import a Financier budget to Actual Budget. 
    
    The options below must be provided on the command line, or passed through
    the environment using the environment variables specified. These can be 
    defined in a '.env' file that will be read at the time the command is run
    for convenience. If both environment variables and command line flags are set,
    the CLI flags will take precedence. (A '.env' file will override any existing
    environment variable definitions)
    
    Please note: there is currently no way via the Actual API to specify that income
    should be "held" for the next month, so if your Financier budget assigns income
    to the next month (like how YNAB recommended and described here:
    https://actualbudget.org/docs/getting-started/starting-clean/#the-month-ahead-method),
    then after the import you will need to manually hold the extra each month going
    back through the budget's history. If you don't do this, it will appear
    that each month has extra "To budget", so it won't match up exactly with
    what is shown in Financier. This is just a display issue and doesn't affect the
    actual budget amounts as far as I understand. Unfortunately, there's nothing that
    can be done about this on the import side because it is  a limitation
    based on how I understand the API to work at this point (see 
    https://github.com/actualbudget/actual/issues/1982)`)
    .version('0.0.1')
    .option('--url <url>', 'The URL for the actual server (e.g. "https://actual.myhost.com") (env: ACTUAL_URL)')
    .option('--password <password>', 'The password for the actual server (env: ACTUAL_PASSWORD)')
    .option('--json <path_to_json>', 'The path to the Financier JSON export (env: FINANCIER_JSON)');

program.parse();

require('dotenv').config()

// parse environment and command line options
missing_options = [];
let ACTUAL_URL, ACTUAL_PASSWORD, FINANCIER_JSON, url_source, password_source, json_source;

if (process.env.ACTUAL_URL !== undefined) {
    ACTUAL_URL = process.env.ACTUAL_URL;
    url_source = 'environment';
}
if (program.opts().url !== undefined) {
    ACTUAL_URL = program.opts().url;
    url_source = 'cli';
}
if (ACTUAL_URL === undefined) missing_options.push('url');
if (process.env.ACTUAL_PASSWORD !== undefined) {
    ACTUAL_PASSWORD = process.env.ACTUAL_PASSWORD;
    password_source = 'environment'
}
if (program.opts().password !== undefined) {
    ACTUAL_PASSWORD = program.opts().password;
    password_source = 'cli';
}
if (ACTUAL_PASSWORD === undefined) missing_options.push('password');
if (process.env.FINANCIER_JSON !== undefined) {
    FINANCIER_JSON = process.env.FINANCIER_JSON;
    json_source = 'environment';
}
if (program.opts().json !== undefined) {
    FINANCIER_JSON = program.opts().json;
    json_source = 'cli';
}
if (FINANCIER_JSON === undefined) missing_options.push('json');

if (missing_options.length > 0){
    console.error(`The following options were missing from the program input: 
    
    ${missing_options}

Please check the help below and provide them.
`);
    program.help();
}

console.log(`Using the following settings:
         ACTUAL_URL: ${ACTUAL_URL} (source: ${url_source})
    ACTUAL_PASSWORD: ${ACTUAL_PASSWORD} (source: ${password_source})
     FINANCIER_JSON: ${FINANCIER_JSON} (source: ${json_source})
`);

// check the JSON file exists
if ( ! fs.existsSync(FINANCIER_JSON)) {
    console.error(`Could not open JSON file "${FINANCIER_JSON}". Please double check it exists.`)
    process.exit(1);
}

let api = require('@actual-app/api');

// strip BOM from UTF-8 JSON file and parse into JS array:
let financier_data = fs.readFileSync(FINANCIER_JSON, 'utf-8').replace(/^\uFEFF/, '');
financier_data = JSON.parse(financier_data);
let budget_name = financier_data.filter((data) => "name" in data && "hints" in data)[0].name

let accounts
let payees
let categories
let category_groups
let budgets
let transactions
let server_payees
let flattened_transactions

// mapping from Financier account types to AB account types
let f2a_account_type_map = {
    'MORTGAGE': 'mortgage',
    'ASSET': 'other',
    'CREDIT': 'credit',
    'DEBIT': 'checking',
    'INVESTMENT': 'investment',
    'SAVINGS': 'savings',
    'CASH': 'other'
};

// keys in this object should be financier IDs, and their values
// should be the new IDs they get from actual when calling "createXXX()"
let f2a_id_mappings = {};

function uuid_from_financier_id(financier_id) {
    let n = financier_id.lastIndexOf("_");
    uuid = financier_id.substring(n + 1);
    return uuid;
}

function set_transfer_payee(trans) {
    if ("transfer_id" in trans) {
        // find matching transaction for other side of transaction
        let matching_trans = flattened_transactions.filter((t) => t.id == trans.transfer_id)[0];
        
        // if matching_trans is a subtransaction, it will have an "_account" id
        // rather than "account"

        // get actual account ID for the account in the matching transaction
        // via its financier ID
        let new_account_id = f2a_id_mappings[
            "account" in matching_trans ? 
                matching_trans.account : 
                matching_trans._account
        ];

        // if we didn't find it, that's because matching_trans.account
        // has already been mapped from financier ID to actual ID, so just
        // use the ID as is (since it's already an actual)
        if (new_account_id == undefined) {
            new_account_id = matching_trans.account
        }
        // get the payee for this "transfer_acct"
        let transfer_payee = server_payees.filter((p) => p.transfer_acct == new_account_id)[0];
        
        // set the transaction's payee to the right ID
        trans.payee = transfer_payee.id;
    }

    return trans;

}

// financier             actual
// master category <-> category group
// category        <-> category
// account         <-> account

function map_accounts() {
    // massages financier export data to get a list of accounts to be uploaded to AB
    let account_data = financier_data.filter((data) => data._id.includes('_account_'));
    account_data = account_data.sort((a1, a2) => (a1.sort > a2.sort) ? 1 : (a1.sort < a2.sort) ? -1 : 0)
    let AB_accounts = account_data.map((data) => {
        let ABAccount = {
            "id": uuid_from_financier_id(data['_id']),  // get UUID from financier id
            "name": data['name'],
            "type": f2a_account_type_map[data['type']],
            "closed": data['closed'],
            "offbudget": !data['onBudget'],
            "financier_id": data['_id'],
            "financier_note": data['note']
        }
        return ABAccount;
    })
    return AB_accounts;
};

function map_category_groups() {
    let cat_data = financier_data.filter((data) => data._id.includes('_master-category_'))
    cat_data = cat_data.sort((a1, a2) => (a1.sort > a2.sort) ? 1 : (a1.sort < a2.sort) ? -1 : 0)
    let AB_category_groups = cat_data.map((data) => {
        return {
            "id": uuid_from_financier_id(data['_id']),  // get UUID from financier id
            "name": data['name'],
            "financier_id": data["_id"]
        };
    })
    return AB_category_groups;
}

function map_categories() {
    // AB categories require "name" and "group_id", but we 
    // won't have group IDs until after adding to the budget
    let cat_data = financier_data.filter((data) => data._id.includes('_category_') & !data._id.includes('_m_category_'))
    cat_data = cat_data.sort((a1, a2) => (a1.sort > a2.sort) ? 1 : (a1.sort < a2.sort) ? -1 : 0)
    let AB_categories = cat_data.map((data) => {
        return {
            "id": uuid_from_financier_id(data['_id']),  // get UUID from financier id
            "name": data['name'],
            "group_id": data["masterCategory"]
        }
    })
    return AB_categories
}

function map_payees() {
    // AB payees require "name", but should also have "category", but we 
    // won't have category IDs until after adding to the budget with add_categories
    let payee_data = financier_data.filter((data) => data._id.includes('_payee_'))
    let AB_payees = payee_data.map((data) => {
        return {
            "id": uuid_from_financier_id(data['_id']),  // get UUID from financier id
            "name": data['name']
        }
    })
    return AB_payees
}

// Helper function to convert hex color codes to readable names
function getColorNameFromHex(hexCode) {
    if (!hexCode) return null;
    
    const colorMap = {
        "#faa710": "Orange",
        "#76b852": "Green",
        "#e5e500": "Yellow",
        "#5276b8": "Blue",
        "#ff0000": "Red",
        "#b852a9": "Purple"
    };
    
    return colorMap[hexCode] || "Colored";
}

function map_single_transaction(transaction, type) {
    /* 
    `type` should be either "main" or "split"

    transaction comes in from financier with the following structure:
        {
            "account": id of account,
            "category": id of category or null,
            "checkNumber": null or int,
            "cleared": bool,
            "_id": financier id,
            "date": "YYYY-MM-DD",
            "flag": null or string,
            "memo": string,
            "payee": id of payee or null,
            "reconciled": bool,
            "splits": array,
            "transfer": id of other transaction (as UUID) or null,
            "value": int
        }

    if part of a split, will have the following:
        {
            "category": id of category or null,
            "id": UUID4 (not ours) that matches the "transfer" of another transaction,
            "payee": id of payee or null,
            "transfer": id of other transaction, if transfer,
            "value": int
        }

    output should be:
        {
            "id": UUID,
            "amount": int,
            "date": YYYY-MM-DD,
            "category": id or null, (optional)
            "account": id,
            "notes": string, (optional)
            "payee": id, (optional)
            "transfer_id": id (of the transaction on other side of the transfer, optional),
            "subtransactions": Transaction[] (optional)
        }
    */
    let financier_id;
    let res;
    if (type === "main" ){
        financier_id = uuid_from_financier_id(transaction["_id"])
    } else {
        // this is a split transaction
        financier_id = transaction["id"];
    }

    // Process flag if present
    let notes = transaction["memo"];
    if (transaction["flag"]) {
        const colorName = getColorNameFromHex(transaction["flag"]);
        // Prepend the flag information to the notes
        notes = `[${colorName} Flag] ${notes || ""}`;
    }

    res = {
        "id": financier_id,
        "amount": transaction['value'],
        "date": transaction['date'],
        "notes": notes,
        "cleared": transaction["cleared"],
        // "financier_account": transaction["account"],
        // "financier_category": transaction["category"],
        // "financier_id": financier_id,
        // "financier_payee": transaction["payee"],
        // "financier_transfer": transaction["transfer"]
    }

    // need to set account
    if (transaction["account"] != null) {
        res["account"] = transaction["account"];
    }
    // the parent of a split should not have a category
    if (!(transaction["category"] == "split" | transaction["category"] == null)) {
        res["category"] = transaction["category"];
    }
    // transfer:
    if (transaction["transfer"] != null) {
        res["transfer_id"] = transaction["transfer"];
    }
    // payee:
    if (transaction["payee"] != null) {
        res["payee"] = transaction["payee"]
    }
    // subtransactions:
    if ("splits" in transaction && transaction["splits"].length > 0) {
        res["subtransactions"] = transaction["splits"].map((trans) => {
            return map_single_transaction(trans, "split")
        })
    }

    return res
}

function map_transactions() {
    let trans_data = financier_data.filter((data) => data._id.includes('_transaction_'))
    let AB_transactions = trans_data.map((trans) => {return map_single_transaction(trans, "main")})

    // let transGroupedByAccount = AB_transactions.reduce(function (r, a) {
    //     r[a.financier_account] = r[a.financier_account] || [];
    //     r[a.financier_account].push(a);
    //     return r;
    // }, Object.create(null));
    return AB_transactions
}

async function add_accounts() {
    console.log("(Step 1/7) adding accounts to budget")
    const bar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);
    bar.start(accounts.length, 0);
    for (account of accounts) {
        let id = await api.createAccount(account, 0);
        f2a_id_mappings[account.id] = id;
        account.id = id;
        bar.increment();
    }
    bar.stop();
    return accounts
}

async function add_category_groups() {
    console.log("(Step 2/7) adding category groups");
    const bar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);
    bar.start(category_groups.length, 0);
    for (cat_group of category_groups) {
        let id = await api.createCategoryGroup(cat_group);
        f2a_id_mappings[cat_group.id] = id;
        cat_group.id = id;
        bar.increment();
    }
    bar.stop();
    return category_groups;
}

async function add_categories() {
    console.log("(Step 3/7) adding categories");
    const bar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);
    bar.start(categories.length, 0);
    for (cat of categories.slice().reverse()) {
        cat.group_id = f2a_id_mappings[cat.group_id]
        let id = await api.createCategory(cat);
        f2a_id_mappings[cat.id] = id;
        cat.id = id;
        bar.increment();
    }
    bar.stop();
    categories = await api.getCategories();
    
    // explicitly add income category mappings from server since
    // they are not included in the above loop
    f2a_id_mappings['income'] = categories.filter((data) => data.name == "Income")[0].id
    f2a_id_mappings['incomeNextMonth'] = f2a_id_mappings['income']
    return categories;
}

async function add_payees() {
    console.log("(Step 4/7) adding payees");
    const bar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);
    bar.start(payees.length, 0);
    for (payee of payees) {
        let id = await api.createPayee(payee);
        f2a_id_mappings[payee.id] = id;
        payee.id = id;
        bar.increment();
    }
    bar.stop();
    return payees;
}

async function add_transactions() {
    console.log("(Step 5/7) adding transactions");
    const bar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);
    bar.start(transactions.length, 0);
    flattened_transactions = transactions.slice();
    for (trans of transactions) {
        // add account information to each subtransaction and push the subtransactions
        // into the flattened_transactions array so we can search across all
        // transactions including splits when looking for transfer matches
        if ("subtransactions" in trans) {
            trans.subtransactions.map((st) => {
                st._account = trans.account
            })
            flattened_transactions.push(...trans.subtransactions)
        }
    }

    for (trans of transactions) {
        // for each transaction, need to update payee, category, account
        // and splits with proper "actual ID" values rather than financier
        if ("account" in trans) {
            trans.account = f2a_id_mappings[trans.account];
        }
        if ("payee" in trans) {
            trans.payee = f2a_id_mappings[trans.payee];
        }
        if ("category" in trans) {
            trans.category = f2a_id_mappings[trans.category];
        }
        
        trans = set_transfer_payee(trans);

        if ("subtransactions" in trans) {
            // need to update category and payee for each sub transaction
            trans.subtransactions = trans.subtransactions.map((trans) => {
                if ("payee" in trans) {
                    trans.payee = f2a_id_mappings[trans.payee];
                }
                if ("category" in trans) {
                    trans.category = f2a_id_mappings[trans.category];
                }
                trans = set_transfer_payee(trans);
                return trans;
            })
        }
        await api.addTransactions(trans["account"], [trans]);
        bar.increment();
    }
    bar.stop();
    return transactions;

}

async function proc_budget_months() {
    function _extract_data(m_category) {
        // pulls out the month and financier category id from the "_id" value
        // of the financier data; returns month, financier category, and corresponding 
        // actual category
        let regexp = /b_[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}_m_category_([0-9]{4}-[0-9]{2})-[0-9]{2}_([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})/;
        let month = m_category.match(regexp)[1];
        let category_uuid = m_category.match(regexp)[2];
        return [month, category_uuid, f2a_id_mappings[category_uuid]]
    }

    console.log("(Step 6/7) processing budget amounts");
    const bar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);

    // month categories have "_m_category_" in their _id parameter
    let month_categories = financier_data.filter((data) => data._id.includes('_m_category_'));
    bar.start(month_categories.length, 0);
    for (mc of month_categories) {
        // loop through, extract values, and make actual API calls to set budget values
        let month, financier_category, actual_category;
        [month, financier_category, actual_category] = _extract_data(mc._id);
        let value = mc.budget;
        let carryover = mc.overspending == true;

        // these two API methods set budget information
        // setBudgetAmount(month month, id categoryId, amount value) → Promise<null>
        // setBudgetCarryover(month month, id categoryId, bool flag) → Promise<null>
        await api.setBudgetAmount(month, actual_category, value);
        await api.setBudgetCarryover(month, actual_category, carryover);
        bar.increment();
    }
    bar.stop();
}

async function generate_month_ahead_report() {
    console.log("Generating month-ahead report...");
    
    // Get all transactions with incomeNextMonth category
    const incomeNextMonthTransactions = financier_data.filter(
        (data) => data._id.includes('_transaction_') && data.category === 'incomeNextMonth'
    );
    
    if (incomeNextMonthTransactions.length === 0) {
        console.log("No 'incomeNextMonth' transactions found. No report needed.");
        return;
    }
    
    // Group transactions by month
    const transactionsByMonth = {};
    for (const trans of incomeNextMonthTransactions) {
        const month = trans.date.substring(0, 7); // Extract YYYY-MM
        if (!transactionsByMonth[month]) {
            transactionsByMonth[month] = [];
        }
        transactionsByMonth[month].push(trans);
    }
    
    // Get all months and sort them chronologically
    const months = Object.keys(transactionsByMonth).sort();
    console.log(`Found 'incomeNextMonth' transactions in ${months.length} month(s): ${months.join(', ')}`);
    
    // Create the report content
    let reportContent = "# Month-Ahead Budget Report\n\n";
    reportContent += "This report shows how much you need to 'Hold for next month' in Actual Budget for each month.\n\n";
    reportContent += "| Month | Amount to Hold (cents) | Amount to Hold (dollars) | Transactions |\n";
    reportContent += "|-------|------------------------|--------------------------|-------------|\n";
    
    // Process each month in chronological order
    for (const month of months) {
        // Calculate total income for next month
        let totalAmount = 0;
        let transactionDetails = [];
        
        for (const trans of transactionsByMonth[month]) {
            totalAmount += trans.value;
            // Add transaction details
            transactionDetails.push(`${trans.date}: ${trans.value/100} (${trans.memo || 'No memo'})`);
        }
        
        // Add to report
        reportContent += `| ${month} | ${totalAmount} | ${(totalAmount/100).toFixed(2)} | ${transactionDetails.join(', ')} |\n`;
    }
    
    // Add instructions
    reportContent += "\n\n## How to Use This Report\n\n";
    reportContent += "1. In Actual Budget, navigate to each month listed above\n";
    reportContent += "2. Click on the 'To Budget' amount\n";
    reportContent += "3. Select 'Hold for next month'\n";
    reportContent += "4. Enter the dollar amount shown in the 'Amount to Hold (dollars)' column\n";
    reportContent += "5. Click 'Hold'\n";
    
    // Write to file
    const reportFileName = "month_ahead_report.md";
    fs.writeFileSync(reportFileName, reportContent);
    
    console.log(`Month-ahead report generated: ${reportFileName}`);
    return reportFileName;
}

(async () => {
    console.log("Initializing API client")
    await api.init({
        // Budget data will be cached locally here, in subdirectories for each file.
        dataDir: '.',
        // This is the URL of your running server
        serverURL: ACTUAL_URL,
        // This is the password you use to log into the server
        password: ACTUAL_PASSWORD,
    });

    // accounts
    accounts = map_accounts();

    // master categories (groups)
    category_groups = map_category_groups();

    // categories
    categories = map_categories();
    
    // payees
    payees = map_payees();

    // transactions
    transactions = map_transactions();
    
    // budgets (done in runImport function)

    // run actual import
    console.log("Running actual import")
    await api.runImport(budget_name,
        async () => {
            accounts  = await add_accounts(); // also adds "id" parameter to accounts
            category_groups = await add_category_groups(); 
            categories = await add_categories();            
            payees = await add_payees();
            server_payees = await api.getPayees();
            transactions = await add_transactions();
            budgets = await proc_budget_months();
        }
    );

    await generate_month_ahead_report();

    await api.shutdown();
  })();
